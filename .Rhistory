# Wyniki
list(
mean_A = mean_A,
sd_A = sd_A,
shapiro_A = shapiro_A,
mean_B = mean_B,
sd_B = sd_B,
shapiro_B = shapiro_B,
wilcox_test = wilcox_test
)
boxplot(gen_A)
boxplot(gen_B[gen_B<1e13])
mean_A <- mean(gen_A)
mean_B <- mean(gen_B)
sd_A <- sd(gen_A)
sd_B <- sd(gen_B)
# Test Shapiro-Wilka
shapiro_A <- shapiro.test(gen_A)
shapiro_B <- shapiro.test(gen_B)
# Test Wilcoxona dla par obserwacji
wilcox_test <- wilcox.test(gen_A, gen_B, paired=TRUE)
# Wyniki
list(
mean_A = mean_A,
sd_A = sd_A,
shapiro_A = shapiro_A,
mean_B = mean_B,
sd_B = sd_B,
shapiro_B = shapiro_B,
wilcox_test = wilcox_test
)
sd(gen_B)
boxplot(gen_A, genB)
boxplot(gen_B[gen_B<1e13])
boxplot(gen_A, genB[gen_B<1e13])
boxplot(gen_B[gen_B<1e13])
median(genB)
median(genA)
log(genA)
log(genB)
log10(genA)
log10(gen_A)
log10(gen_B)
gen_A_log10 <- log10(gen_A)
gen_B_log10 <- log10(gen_B)
gen_A_log10 <- log10(gen_A)
gen_B_log10 <- log10(gen_B)
mean_A <- mean(gen_A_log10)
mean_B <- mean(gen_B_log10)
sd_A <- sd(gen_A_log10)
sd_B <- sd(gen_B_log10)
# Test Shapiro-Wilka
shapiro_A <- shapiro.test(gen_A_log10)
shapiro_B <- shapiro.test(gen_B_log10)
# Test Wilcoxona dla par obserwacji
t_test <- t.test(gen_A_log10, gen_B_log10, paired=TRUE)
# Wyniki
list(
mean_A = mean_A,
sd_A = sd_A,
shapiro_A = shapiro_A,
mean_B = mean_B,
sd_B = sd_B,
shapiro_B = shapiro_B,
t_test = t_test
)
gen_A_log10
gen_B_log10
qqPlot(gen_A_log10)
qqnorm(gen_A_log10)
gen_A_log10 <- log10(gen_A)
gen_B_log10 <- log10(gen_B)
mean_A <- mean(gen_A_log10)
mean_B <- mean(gen_B_log10)
sd_A <- sd(gen_A_log10)
sd_B <- sd(gen_B_log10)
# Test Shapiro-Wilka
shapiro_A <- shapiro.test(gen_A_log10)
shapiro_B <- shapiro.test(gen_B_log10)
qqnorm(gen_A_log10)
qqnorm(gen_B_log10)
# Test Wilcoxona dla par obserwacji
t_test <- t.test(gen_A_log10, gen_B_log10, paired=TRUE)
# Wyniki
list(
mean_A = mean_A,
sd_A = sd_A,
shapiro_A = shapiro_A,
mean_B = mean_B,
sd_B = sd_B,
shapiro_B = shapiro_B,
t_test = t_test
)
qqnorm(gen_B_log10)
qqnorm(gen_B)
qqnorm(gen_A)
qqnorm(gen_A_log10)
gen_B[gen_B < 10e13]
gen_B[gen_B < 1e13]
shapiro.test(gen_B[gen_B < 1e13])
shapiro.test(gen_B[gen_B < 1e12])
shapiro.test(gen_B[gen_B < 1e11])
gen_B[gen_B < 1e11]
gen_B[gen_B < 1e12]
gen_B[gen_B < 1e13]
gen_B[gen_B < 1e17]
gen_B[gen_B < 1e15]
shapiro.test(gen_B[gen_B < 1e15])
shapiro.test(gen_B[gen_B < 1e10])
shapiro.test(gen_B[gen_B < 1e11])
shapiro.test(gen_B[gen_B < 5e11])
gen_B[gen_B < 5e11]
shapiro.test(gen_B[gen_B < 1e12])
shapiro.test(gen_B[gen_B < 9e11])
shapiro.test(gen_B[gen_B < 7e11])
shapiro.test(gen_B[gen_B < 8e11])
gen_B[gen_B < 5e11]
gen_B[gen_B < 8e11]
gen_A_log10 <- log10(gen_A)
gen_B_log10 <- log10(gen_B)
mean_A <- mean(gen_A_log10)
mean_B <- mean(gen_B_log10)
sd_A <- sd(gen_A_log10)
sd_B <- sd(gen_B_log10)
# Test Shapiro-Wilka
shapiro_A <- shapiro.test(gen_A_log10)
shapiro_B <- shapiro.test(gen_B_log10)
qqnorm(gen_A_log10)
qqnorm(gen_B_log10)
# Test Wilcoxona dla par obserwacji
t_test <- t.test(gen_A_log10, gen_B_log10, paired=FALSE)
# Wyniki
list(
mean_A = mean_A,
sd_A = sd_A,
shapiro_A = shapiro_A,
mean_B = mean_B,
sd_B = sd_B,
shapiro_B = shapiro_B,
t_test = t_test
)
gen_A_log10 <- log10(gen_A)
gen_B_log10 <- log10(gen_B)
mean_A <- mean(gen_A_log10)
mean_B <- mean(gen_B_log10)
sd_A <- sd(gen_A_log10)
sd_B <- sd(gen_B_log10)
# Test Shapiro-Wilka
shapiro_A <- shapiro.test(gen_A_log10)
shapiro_B <- shapiro.test(gen_B_log10)
qqnorm(gen_A_log10)
qqnorm(gen_B_log10)
# Test Wilcoxona dla par obserwacji
t_test <- t.test(gen_A_log10, gen_B_log10, paired=TRUE)
# Wyniki
list(
mean_A = mean_A,
sd_A = sd_A,
shapiro_A = shapiro_A,
mean_B = mean_B,
sd_B = sd_B,
shapiro_B = shapiro_B,
t_test = t_test
)
gen_A_log10 <- log10(gen_A)
gen_B_log10 <- log10(gen_B)
mean_A <- mean(gen_A_log10)
mean_B <- mean(gen_B_log10)
sd_A <- sd(gen_A_log10)
sd_B <- sd(gen_B_log10)
# Test Shapiro-Wilka
shapiro_A <- shapiro.test(gen_A_log10)
shapiro_B <- shapiro.test(gen_B_log10)
qqnorm(gen_A_log10)
qqnorm(gen_B_log10)
# Test Wilcoxona dla par obserwacji
t_test <- t.test(gen_A_log10, gen_B_log10, paired=FALSE)
# Wyniki
list(
mean_A = mean_A,
sd_A = sd_A,
shapiro_A = shapiro_A,
mean_B = mean_B,
sd_B = sd_B,
shapiro_B = shapiro_B,
t_test = t_test
)
qqnorm(gen_A_log10)
qqnorm(gen_B_log10)
qqnorm(gen_B)
qqnorm(gen_A)
qqnorm(gen_B[gen_B < 1e11])
qqnorm(gen_B[gen_B < 1e13])
qqnorm(gen_B[gen_B < 1e15])
qqnorm(gen_B[gen_B < 1e14])
qqnorm(gen_B[gen_B < 1e13])
qqnorm(gen_B[gen_B < 5e13])
qqnorm(gen_B[gen_B < 2e13])
qqnorm(gen_B[gen_B < 1e13])
qqnorm(gen_B[gen_B < 5e13])
qqnorm(gen_B[gen_B < 1e13])
shapiro.wilk(gen_B[gen_B < 1e13])
shapiro.test(gen_B[gen_B < 1e13])
plot(gen_A)
plot(gen_B)
qqnorm(gen_B[gen_B < 1e13])
qqnorm(gen_B[gen_B < 5e13])
qqnorm(gen_B[gen_B < 1e13])
mean_A <- mean(gen_A)
mean_B <- mean(gen_B)
sd_A <- sd(gen_A)
sd_B <- sd(gen_B)
# Test Shapiro-Wilka
shapiro_A <- shapiro.test(gen_A)
shapiro_B <- shapiro.test(gen_B)
# Test Wilcoxona dla par obserwacji
wilcox_test <- wilcox.test(gen_A[gen_B<1e13], gen_B[gen_B<1e13], paired=TRUE)
# Wyniki
list(
mean_A = mean_A,
sd_A = sd_A,
shapiro_A = shapiro_A,
mean_B = mean_B,
sd_B = sd_B,
shapiro_B = shapiro_B,
wilcox_test = wilcox_test
)
mean_A <- mean(gen_A)
mean_B <- mean(gen_B)
sd_A <- sd(gen_A)
sd_B <- sd(gen_B)
# Test Shapiro-Wilka
shapiro_A <- shapiro.test(gen_A)
shapiro_B <- shapiro.test(gen_B)
# Test Wilcoxona dla par obserwacji
wilcox_test <- wilcox.test(gen_A, gen_B, paired=TRUE)
# Wyniki
list(
mean_A = mean_A,
sd_A = sd_A,
shapiro_A = shapiro_A,
mean_B = mean_B,
sd_B = sd_B,
shapiro_B = shapiro_B,
wilcox_test = wilcox_test
)
mean_A <- mean(gen_A)
mean_B <- mean(gen_B)
sd_A <- sd(gen_A)
sd_B <- sd(gen_B)
# Test Shapiro-Wilka
shapiro_A <- shapiro.test(gen_A)
shapiro_B <- shapiro.test(gen_B)
# Test Wilcoxona dla par obserwacji
wilcox_test <- wilcox.test(gen_A, gen_B, paired=FALSE)
# Wyniki
list(
mean_A = mean_A,
sd_A = sd_A,
shapiro_A = shapiro_A,
mean_B = mean_B,
sd_B = sd_B,
shapiro_B = shapiro_B,
wilcox_test = wilcox_test
)
mean_A <- mean(gen_A)
mean_B <- mean(gen_B)
sd_A <- sd(gen_A)
sd_B <- sd(gen_B)
# Test Shapiro-Wilka
shapiro_A <- shapiro.test(gen_A)
shapiro_B <- shapiro.test(gen_B)
# Test Wilcoxona dla par obserwacji
wilcox_test <- wilcox.test(gen_A, gen_B, paired=TRUE)
# Wyniki
list(
mean_A = mean_A,
sd_A = sd_A,
shapiro_A = shapiro_A,
mean_B = mean_B,
sd_B = sd_B,
shapiro_B = shapiro_B,
wilcox_test = wilcox_test
)
mean_A <- mean(gen_A)
mean_B <- mean(gen_B)
sd_A <- sd(gen_A)
sd_B <- sd(gen_B)
# Test Shapiro-Wilka
shapiro_A <- shapiro.test(gen_A)
shapiro_B <- shapiro.test(gen_B)
# Test Wilcoxona dla par obserwacji
wilcox_test <- wilcox.test(gen_A, gen_B, paired=FALSE)
# Wyniki
list(
mean_A = mean_A,
sd_A = sd_A,
shapiro_A = shapiro_A,
mean_B = mean_B,
sd_B = sd_B,
shapiro_B = shapiro_B,
wilcox_test = wilcox_test
)
shiny::runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
shiny::runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
View(dane)
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
runApp('studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer')
source("~/studia/4sem/AT4BR/Evolution-Explorer/Evolution-Explorer/Evolution-Explorer/app.R")
###########################
# UI                      #
###########################
fluidPage(
navbarPage("Human Evolution Explorer",
tabPanel(
"Explore",
titlePanel("Evolution Data Scatter Plot"),
sidebarLayout(
sidebarPanel(
selectInput("species", "Select Species:",
choices = unique(evoData$Genus_._Specie),
selected = 'hominino Orrorin tugenencin')
),
mainPanel(
plotOutput("distPlot")
)
)
), # Explore
tabPanel(
title="Credits",
titlePanel("Data"),
div(includeMarkdown("data.md"),
align="justify")
) # Credits tabPanel()
) # navbarPage()
) # fluidPage()
library(shiny)
###########################
# UI                      #
###########################
fluidPage(
navbarPage("Human Evolution Explorer",
tabPanel(
"Explore",
titlePanel("Evolution Data Scatter Plot"),
sidebarLayout(
sidebarPanel(
selectInput("species", "Select Species:",
choices = unique(evoData$Genus_._Specie),
selected = 'hominino Orrorin tugenencin')
),
mainPanel(
plotOutput("distPlot")
)
)
), # Explore
tabPanel(
title="Credits",
titlePanel("Data"),
div(includeMarkdown("data.md"),
align="justify")
) # Credits tabPanel()
) # navbarPage()
) # fluidPage()
evoData <- read.csv("../Evolution_DataSets.csv")
###########################
# Server logic            #
###########################
server <- function(input, output, session) {
output$distPlot <- renderPlot({
selected_values <- evo_data %>%
filter(Genus_._Specie == 'hominino Orrorin tugenencin') %>%
select(Time)
plot <- ggplot(selected_values, aes(x = selected_values, y = selected_values)) +
geom_point() +
labs(title = "Scatter Plot", x = "X Axis", y = "Y Axis") +
theme_minimal()
# Print the plot
print(plot)
})
}
###########################
# UI                      #
###########################
ui <- fluidPage(
navbarPage("Human Evolution Explorer",
tabPanel(
"Explore",
titlePanel("Evolution Data Scatter Plot"),
sidebarLayout(
sidebarPanel(
selectInput("species", "Select Species:",
choices = unique(evo_data$Genus_._Specie),
selected = 'hominino Orrorin tugenencin')
),
mainPanel(
plotOutput("distPlot")
)
)
), # Explore
tabPanel(
title="Credits",
titlePanel("Data"),
div(includeMarkdown("../data.md"),
align="justify")
) # Credits tabPanel()
) # navbarPage()
) # fluidPage()
ui <- fluidPage(
navbarPage("Human Evolution Explorer",
tabPanel(
"Explore",
titlePanel("Evolution Data Scatter Plot"),
sidebarLayout(
sidebarPanel(
selectInput("species", "Select Species:",
choices = unique(evo_data$Genus_._Specie),
selected = 'hominino Orrorin tugenencin')
),
mainPanel(
plotOutput("distPlot")
)
)
), # Explore
tabPanel(
title="Credits",
titlePanel("Data"),
div(includeMarkdown("../data.md"),
align="justify")
) # Credits tabPanel()
) # navbarPage()
) # fluidPage()
runApp('./Shiny tutorial/main.r')
getwd()
setwd("./studia/4sem/AT4BR/Evolution-Explorer")
runApp('./Evolution-Explorer/app.R')
library(shiny)
runApp('./Evolution-Explorer/app.R')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
sapiens <- evo_data %>% filter(Genus_._Specie == "Homo Sapiens")
evo_data <- read.csv("../Evolution_DataSets.csv")
evo_data <- read.csv("./Evolution_DataSets.csv")
sapiens <- evo_data %>% filter(Genus_._Specie == "Homo Sapiens")
View(sapiens)
sapiens <- evo_data %>% filter(Genus_._Specie == "Homo Neanderthalis")
sapiens <- evo_data %>% filter(Genus_._Specie == "Homo Neanderthalensis")
sapiens <- evo_data %>% filter(Genus_._Specie == "
Homo Neanderthalensis")
sapiens <- evo_data %>% filter(Genus_._Specie == "Homo Neanderthalensis")
View(sapiens)
sapiens <- evo_data %>% filter(Genus_._Specie == "Homo Nalendi")
View(evo_data %>% filter(Genus_._Specie == "Homo Nalendi"))
View(evo_data %>% filter(Genus_._Specie == "Homo Sapiens"))
evo_data
View(evo_data)
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
sapiens
nrow(sapiens)
nrow(sapiens) > 0
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
runApp('Evolution-Explorer')
